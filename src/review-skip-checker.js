#!/usr/bin/env node
/**
 * GitHub PR Î¶¨Î∑∞ Ïä§ÌÇµ ÌåêÎã® ÏãúÏä§ÌÖú
 * 
 * PRÏùò ÎÇ¥Ïö©ÏùÑ Î∂ÑÏÑùÌïòÏó¨ ÏûêÎèô AI Î¶¨Î∑∞Î•º Ïä§ÌÇµÌï†ÏßÄ Í≤∞Ï†ïÌï©ÎãàÎã§.
 * 
 * Ïä§ÌÇµ Ï°∞Í±¥:
 * 1. Documentation Ï†ÑÏö© Î≥ÄÍ≤ΩÏÇ¨Ìï≠
 * 2. ÏÑ§Ï†ï ÌååÏùºÎßå Î≥ÄÍ≤Ω (package.jsonÏùò dependencies Ï†úÏô∏)
 * 3. Îß§Ïö∞ Í∞ÑÎã®Ìïú ÌÖçÏä§Ìä∏/Î≤àÏó≠ ÌååÏùº ÏàòÏ†ï
 * 4. PR Ï†úÎ™©Ïóê [SKIP-REVIEW] ÌÉúÍ∑∏ Ìè¨Ìï®
 * 5. ÌååÏùº Ïàò 1Í∞ú, Î≥ÄÍ≤ΩÎêú Ï§Ñ Ïàò 5Ï§Ñ Ïù¥ÌïòÏùò trivial Î≥ÄÍ≤Ω
 */

class ReviewSkipChecker {
    constructor() {
        this.skipPatterns = {
            // Î¨∏ÏÑú Î∞è README ÌååÏùº
            documentation: [
                /^readme\.(md|txt|rst)$/i,
                /^docs?\//i,
                /\.md$/i,
                /^changelog/i,
                /^contributing/i,
                /^license/i,
                /^authors?/i,
                /^news\.(md|txt|rst)$/i
            ],
            
            // ÏÑ§Ï†ï ÌååÏùº (ÏùòÏ°¥ÏÑ± Î≥ÄÍ≤Ω Ï†úÏô∏)
            config: [
                /^\.gitignore$/,
                /^\.editorconfig$/,
                /^\.prettierrc/,
                /^\.eslintrc/,
                /^tsconfig\.json$/,
                /^jest\.config/,
                /^webpack\.config/,
                /^rollup\.config/,
                /^vite\.config/,
                /^\.env\.example$/,
                /^\.nvmrc$/,
                /^\.tool-versions$/
            ],
            
            // Í∞ÑÎã®Ìïú ÌÖçÏä§Ìä∏/Î≤àÏó≠ ÌååÏùº
            trivialText: [
                /^locales?\//i,
                /^translations?\//i,
                /^i18n\//i,
                /\.po$/i,
                /\.pot$/i,
                /\.csv$/i,
                /\.txt$/i
            ]
        };
    }

    /**
     * PR Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Î∞òÏúºÎ°ú Î¶¨Î∑∞ Ïä§ÌÇµ Ïó¨Î∂ÄÎ•º ÌåêÎã®
     * @param {Object} prData - PR Ï†ïÎ≥¥
     * @param {Array} changedFiles - Î≥ÄÍ≤ΩÎêú ÌååÏùº Î™©Î°ù
     * @returns {Object} Ïä§ÌÇµ Ïó¨Î∂ÄÏôÄ Ïù¥Ïú†
     */
    shouldSkipReview(prData, changedFiles) {
        const checks = [
            this.checkExplicitSkipTag(prData),
            this.checkTrivialChanges(prData, changedFiles),
            this.checkDocumentationOnly(changedFiles),
            this.checkConfigOnly(changedFiles),
            this.checkTranslationOnly(changedFiles)
        ];

        const skipReasons = checks.filter(check => check.skip).map(check => check.reason);
        
        return {
            skip: skipReasons.length > 0,
            reasons: skipReasons,
            fileCount: changedFiles.length,
            totalChanges: changedFiles.reduce((sum, file) => sum + file.additions + file.deletions, 0)
        };
    }

    /**
     * PR Ï†úÎ™©Ïóê Î™ÖÏãúÏ†Å Ïä§ÌÇµ ÌÉúÍ∑∏Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
     */
    checkExplicitSkipTag(prData) {
        const skipTags = ['[SKIP-REVIEW]', '[NO-REVIEW]', '[DOCS-ONLY]'];
        const hasSkipTag = skipTags.some(tag => prData.title.includes(tag));
        
        return {
            skip: hasSkipTag,
            reason: hasSkipTag ? 'Î™ÖÏãúÏ†Å Î¶¨Î∑∞ Ïä§ÌÇµ ÌÉúÍ∑∏ Î∞úÍ≤¨' : null
        };
    }

    /**
     * Îß§Ïö∞ Í∞ÑÎã®Ìïú Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù∏ÏßÄ ÌôïÏù∏
     */
    checkTrivialChanges(prData, changedFiles) {
        const totalChanges = changedFiles.reduce((sum, file) => sum + file.additions + file.deletions, 0);
        const isTrivial = changedFiles.length === 1 && totalChanges <= 5;
        
        return {
            skip: isTrivial,
            reason: isTrivial ? `Îß§Ïö∞ Í∞ÑÎã®Ìïú Î≥ÄÍ≤ΩÏÇ¨Ìï≠ (ÌååÏùº 1Í∞ú, Î≥ÄÍ≤Ω ${totalChanges}Ï§Ñ)` : null
        };
    }

    /**
     * Î¨∏ÏÑú ÌååÏùºÎßå Î≥ÄÍ≤ΩÎêòÏóàÎäîÏßÄ ÌôïÏù∏
     */
    checkDocumentationOnly(changedFiles) {
        const isDocumentationFile = (filename) => {
            return this.skipPatterns.documentation.some(pattern => 
                pattern.test(filename.toLowerCase())
            );
        };

        const allDocumentation = changedFiles.length > 0 && 
            changedFiles.every(file => isDocumentationFile(file.filename));
        
        return {
            skip: allDocumentation,
            reason: allDocumentation ? 'Î¨∏ÏÑú ÌååÏùºÎßå Î≥ÄÍ≤ΩÎê®' : null
        };
    }

    /**
     * ÏÑ§Ï†ï ÌååÏùºÎßå Î≥ÄÍ≤ΩÎêòÏóàÎäîÏßÄ ÌôïÏù∏ (ÏùòÏ°¥ÏÑ± Î≥ÄÍ≤Ω Ï†úÏô∏)
     */
    checkConfigOnly(changedFiles) {
        const isConfigFile = (filename) => {
            return this.skipPatterns.config.some(pattern => 
                pattern.test(filename.toLowerCase())
            );
        };

        const hasPackageJsonChanges = changedFiles.some(file => {
            if (file.filename.toLowerCase() === 'package.json') {
                // package.json Î≥ÄÍ≤ΩÏù¥ ÏûàÎã§Î©¥ patch ÎÇ¥Ïö©ÏùÑ ÌôïÏù∏Ìï¥Ïïº Ìï®
                // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî dependencies, devDependencies ÏÑπÏÖò Î≥ÄÍ≤Ω Ïó¨Î∂Ä ÌôïÏù∏
                return this.hasDependendencyChanges(file.patch || '');
            }
            return false;
        });

        if (hasPackageJsonChanges) {
            return { skip: false, reason: null };
        }

        const allConfig = changedFiles.length > 0 && 
            changedFiles.every(file => isConfigFile(file.filename));
        
        return {
            skip: allConfig,
            reason: allConfig ? 'ÏÑ§Ï†ï ÌååÏùºÎßå Î≥ÄÍ≤ΩÎê® (ÏùòÏ°¥ÏÑ± Î≥ÄÍ≤Ω ÏóÜÏùå)' : null
        };
    }

    /**
     * Î≤àÏó≠/Îã§Íµ≠Ïñ¥ ÌååÏùºÎßå Î≥ÄÍ≤ΩÎêòÏóàÎäîÏßÄ ÌôïÏù∏
     */
    checkTranslationOnly(changedFiles) {
        const isTranslationFile = (filename) => {
            return this.skipPatterns.trivialText.some(pattern => 
                pattern.test(filename.toLowerCase())
            );
        };

        const allTranslation = changedFiles.length > 0 && 
            changedFiles.every(file => isTranslationFile(file.filename));
        
        return {
            skip: allTranslation,
            reason: allTranslation ? 'Î≤àÏó≠/ÌÖçÏä§Ìä∏ ÌååÏùºÎßå Î≥ÄÍ≤ΩÎê®' : null
        };
    }

    /**
     * package.jsonÏóêÏÑú ÏùòÏ°¥ÏÑ± Î≥ÄÍ≤ΩÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
     */
    hasDependendencyChanges(patch) {
        const dependencyPatterns = [
            /"dependencies"\s*:/,
            /"devDependencies"\s*:/,
            /"peerDependencies"\s*:/,
            /"optionalDependencies"\s*:/
        ];

        return dependencyPatterns.some(pattern => pattern.test(patch));
    }

    /**
     * ÎîîÎ≤ÑÍπÖÏö© Ï†ïÎ≥¥ ÏÉùÏÑ±
     */
    generateDebugInfo(prData, changedFiles, result) {
        return {
            pr: {
                title: prData.title,
                number: prData.number,
                author: prData.author
            },
            files: changedFiles.map(file => ({
                name: file.filename,
                additions: file.additions,
                deletions: file.deletions,
                changes: file.changes
            })),
            decision: result,
            timestamp: new Date().toISOString()
        };
    }
}

// CLI Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
if (require.main === module) {
    const checker = new ReviewSkipChecker();
    
    // ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§
    const testCases = [
        {
            name: "Documentation only",
            prData: { title: "Update README", number: 123, author: "user" },
            files: [{ filename: "README.md", additions: 5, deletions: 2 }]
        },
        {
            name: "Skip tag explicit",
            prData: { title: "[SKIP-REVIEW] Fix typo", number: 124, author: "user" },
            files: [{ filename: "src/utils.js", additions: 1, deletions: 1 }]
        },
        {
            name: "Dependency change",
            prData: { title: "Add new library", number: 125, author: "user" },
            files: [{ filename: "package.json", additions: 1, deletions: 0, patch: '+    "lodash": "^4.17.21"' }]
        },
        {
            name: "Config only",
            prData: { title: "Update ESLint config", number: 126, author: "user" },
            files: [{ filename: ".eslintrc.json", additions: 3, deletions: 1 }]
        }
    ];
    
    console.log("üß™ Î¶¨Î∑∞ Ïä§ÌÇµ Ï≤¥Ïª§ ÌÖåÏä§Ìä∏");
    console.log("========================");
    
    testCases.forEach(testCase => {
        const result = checker.shouldSkipReview(testCase.prData, testCase.files);
        console.log(`\n${testCase.name}:`);
        console.log(`  Skip: ${result.skip ? '‚úÖ' : '‚ùå'}`);
        console.log(`  Reasons: ${result.reasons.join(', ') || 'None'}`);
        console.log(`  Files: ${result.fileCount}, Changes: ${result.totalChanges}`);
    });
}

module.exports = ReviewSkipChecker;